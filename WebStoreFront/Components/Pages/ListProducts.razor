@page "/ListProducts"
@using StoreApi.Entities
@using System.Net.Http.Headers;
@inject HttpClient HttpClient


<MudDataGrid T="Product" Items="@ProductList" Hover="true" Groupable="true"  Dense="true" 
MultiSelection="false" Filterable="true" 
FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" 
SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
ReadOnly="@_readOnly"
CommittedItemChanges="@CommittedItemChanges"
>
	<ToolBarContent>
		<MudText Typo="Typo.h6">Products</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
		AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<Columns>

		<PropertyColumn Property="x => x.ProductId" Title="Id" Groupable="false" />
		<PropertyColumn Property="x => x.ProductName" Title="Name"  Groupable="false"/>
		<PropertyColumn Property="x => x.Brand" />
		<PropertyColumn Property="x => x.StockQuantity" />
		<PropertyColumn Property="x => x.Price" Format="C" Groupable="false" />
		<PropertyColumn Resizable="false" Property="x => x.Description" Groupable="false" />
		<TemplateColumn Hidden="@(_readOnly)" CellClass="d-flex justify-end">
			<CellTemplate>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
			</CellTemplate>
		</TemplateColumn>
	</Columns>
	<PagerContent>
		<MudDataGridPager T="Product" />
	</PagerContent>
</MudDataGrid>
<h1>@LatestJSON</h1>
@code {
	private string _searchString = "";
	public string LatestJSON = "";
	private bool _readOnly = false;
	public IEnumerable<Product> ProductList = new List<Product>();
	private string? _serviceEndpoint;
	protected override async Task OnInitializedAsync()
	{
		_serviceEndpoint = $"{HttpClient.BaseAddress}StoreApi/Product";
		await GetProducts();

	}

	private async Task GetProducts()
	{
		ProductList = await HttpClient.GetFromJsonAsync<List<Product>>(_serviceEndpoint);
	}

	// quick filter - filter globally across multiple columns with the same input
	private Func<Product, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Description is not null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Brand is not null && x.Brand.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};

	private async Task CommittedItemChanges(Product product)
	{
		//LatestJSON = $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(product)}";

		var request = new HttpRequestMessage
		{
			Method = HttpMethod.Put,
			RequestUri = new Uri($"https://localhost:7110/StoreApi/Product/{product.ProductId}"),
			Content = new StringContent($"{System.Text.Json.JsonSerializer.Serialize(product)}")
			{
				Headers =
				{
					ContentType = new MediaTypeHeaderValue("application/json")
				}
			}
		};
		using (var response = await HttpClient.SendAsync(request))
		{
			response.EnsureSuccessStatusCode();
			LatestJSON = await response.Content.ReadAsStringAsync();
			
		}
	}
}