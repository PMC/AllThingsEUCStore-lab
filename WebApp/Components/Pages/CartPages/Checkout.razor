@page "/checkout"
@using System.Net.Http.Headers;
@using StoreApi.Entities
@using WebApp.Entities
@using WebApp.Services.CartService
@inject ICartService CartService
@inject HttpClient HttpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))


<MudContainer MaxWidth="MaxWidth.Large">

	<MudGrid>

		<MudItem md="6" xs="12" Style="background-color: white">

			<MudForm @bind-IsValid="@success">
				<MudText Typo="Typo.h6">Shipping address</MudText>
				<MudGrid Style="padding-right: 2rem">

					<MudItem xs="12" md="6">
						<MudTextField Label="First Name" @bind-Value="_order.FirstName" Required="true" Variant="Variant.Outlined"
						RequiredError="First Name is required!" />
					</MudItem>
					<MudItem xs="12" md="6">
						<MudTextField Label="Last Name" @bind-Value="_order.LastName" Required="true" Variant="Variant.Outlined"
						RequiredError="Last Name is required!" />
					</MudItem>
					<MudItem xs="12">
						<MudTextField Label="Address" @bind-Value="_order.Address1" Required="true" Margin="Margin.Dense" Variant="Variant.Outlined"
						RequiredError="Address is required!" Lines="2" />
					</MudItem>
					<MudItem xs="12">
						<MudTextField Label="Apartment, suite, etc. (optional)" @bind-Value="_order.Address2" Required="false" Variant="Variant.Outlined" Clearable />
					</MudItem>
					<MudItem xs="12" md="6">
						<MudTextField Label="City" @bind-Value="_order.City" Required="true" RequiredError="City is required!" Variant="Variant.Outlined" />
					</MudItem>
					<MudItem xs="12" md="6">
						<MudTextField Label="Zip Code" @bind-Value="_order.ZipCode" Required="true" Variant="Variant.Outlined"
						RequiredError="Zip Code is required!" />
					</MudItem>
					<MudItem xs="12">
						<MudTextField Label="Email" @bind-Value="_order.Email" Required="true" Variant="Variant.Outlined"
						RequiredError="Email is required!" InputType="InputType.Email" />
					</MudItem>
					<MudItem xs="12">
						<MudTextField Label="Phone Number" @bind-Value="_order.PhoneNumber" InputType="InputType.Telephone" Variant="Variant.Outlined" />
					</MudItem>
				</MudGrid>


				<MudText Typo="Typo.h6" Style="padding-top: 1rem">Payment</MudText>
				<MudGrid Class="justify-space-between" Style="padding-right: 2rem">
					<MudItem xs="12">
						<MudTextField Mask="@(new PatternMask("0000 0000 0000 0000"))" Label="Card Number"
						@bind-Value="_cardInfo.CreditCard" Variant="@Variant.Outlined" Clearable
						Required="true" RequiredError="Card Number is required!" />
					</MudItem>
					<MudItem xs="6">
						<MudTextField Mask="@(new DateMask("MM/YY", 'Y', 'M'))" Label="Expiration date (MM / YY)"
						@bind-Value="_cardInfo.Expiration" Variant="@Variant.Outlined"
						Required="true" RequiredError="Expiration date is required!" />

					</MudItem>
					<MudItem xs="6">
						<MudTextField Mask="@(new PatternMask("000"))" Label="CVC"
						@bind-Value="_cardInfo.CVC" Variant="@Variant.Outlined"
						Required="true" RequiredError="CVC is required!" />

					</MudItem>
					<MudItem xs="12">
						<MudTextField Label="Name on card"
						@bind-Value="_cardInfo.Name" Variant="@Variant.Outlined" Clearable />
					</MudItem>
				</MudGrid>

			</MudForm>
			<MudStack Row="false" AlignItems="AlignItems.End" Class="mt-10 mb-10 mr-7">
				<MudButton Variant="Variant.Filled" Color="Color.Success" EndIcon="@Icons.Material.Filled.Send" OnClick="PlaceOrder" Class="pa-4 pr-6 pl-6" IconSize="Size.Large" Disabled="@(!success)">
					Place Order
				</MudButton>
			</MudStack>
		</MudItem>



		<MudItem md="6" xs="12">
			<MudText Typo="Typo.h6" GutterBottom="true">Shopping Cart</MudText>

			<MudSimpleTable>
				<thead>
					<tr>
						@foreach (var h in "Product, Quantity, Price".Split(","))
						{
							<th>@h</th>
						}
					</tr>
				</thead>
				<tbody>

					@foreach (var item in _order.OrderDetails)
					{
						<tr>
							<td>@item.ProductName</td>
							<td>@item.Quantity</td>
							<td>@item.Price.ToString("c")</td>

						</tr>
					}

				</tbody>
			</MudSimpleTable>

		</MudItem>
	</MudGrid>
</MudContainer>


@code {
	public List<CartItem> _cartItems;
	private Order _order;
	private CreditCardInfo _cardInfo;
	bool success;

	protected override async Task OnInitializedAsync()
	{

		await CreateNewOrder();
	}

	private async Task CreateNewOrder()
	{
		_order = new Order()
			{
				CustomerId = "new",
				OrderDate = DateTime.UtcNow
			};
		_cardInfo = new();

		//wrap cart into order

		var _cartItems = await CartService.GetCartItems();

		foreach (var cartItem in _cartItems)
		{
			_order.OrderDetails.Add(new OrderDetail()
				{
					Quantity = cartItem.Quantity,
					ProductId = cartItem.ProductId,
					Price = cartItem.Price,
					ProductName = cartItem.ProductName
				});

		}


	}

	private async void PlaceOrder()
	{
		var newOrder = new CreateOrderDto()
		{
			CustomerId = _order.CustomerId,
			FirstName = _order.FirstName,
			LastName = _order.LastName,
			City = _order.City,

			Address1 = _order.Address1,
			Address2 = _order.Address2,
			Email = _order.Email,
			ZipCode = _order.ZipCode,

		};
		newOrder.OrderItems = new List<OrderItemDto>();
		foreach (var o in _order.OrderDetails)
		{
			var x = new OrderItemDto();
			x.Quantity = o.Quantity;
			x.ProductId = o.ProductId;
			newOrder.OrderItems.Add( x);
		}
		var request = new HttpRequestMessage
		{
			Method = HttpMethod.Post,
			RequestUri = new Uri("https://localhost:7110/orders"),
			Content = new StringContent($"{System.Text.Json.JsonSerializer.Serialize(newOrder)}")
			{
				Headers =
				{
					ContentType = new MediaTypeHeaderValue("application/json")
				}
			}

		};
		using (var response = await HttpClient.SendAsync(request))
		{
			response.EnsureSuccessStatusCode();
			var body = await response.Content.ReadAsStringAsync();
			Console.WriteLine(body);
		}

		Console.WriteLine("Order placed!");
		Console.WriteLine($"Name: {_order.FirstName} {_order.LastName}");
		Console.WriteLine($"Address: {_order.Address1},{_order.Address2}, {_order.City}, {_order.ZipCode}");
		Console.WriteLine($"Email: {_order.Email}");
		Console.WriteLine($"Phone: {_order.PhoneNumber}");
		Console.WriteLine($"Credit: {_cardInfo.CreditCard}");

		ShowVariant("Order Sent! Thank you!", Variant.Filled);
		CartService.EmptyCart();
		
	}

	protected void ShowVariant(string message, Variant variant)
	{

		Snackbar.Add(message, Severity.Success, (options) =>
		{
			options.CloseAfterNavigation = true;
			options.SnackbarVariant = variant;
			options.VisibleStateDuration = 2000;


		});
	}
}