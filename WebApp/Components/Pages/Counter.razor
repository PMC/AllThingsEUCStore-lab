@page "/counter"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage

<PageTitle>Counter</PageTitle>

<MudToolBar>
	<MudStack Row="true">
<div class="background-color:  blue"> content</div>
<MudSpacer />
		<div Class="background-color: blue"> <MudText Typo="Typo.h6">ELECTRIC UNICYCLES</MudText></div>
		

		</MudStack>
</MudToolBar>
<br/>

<MudStack Row="true" Breakpoint="Breakpoint.MdAndDown">
	<MudButton Variant="Variant.Filled" OnClick="ShowFilters" StartIcon="@Icons.Material.Filled.FilterAlt" Color="Color.Secondary" Size="Size.Small">Filter</MudButton>
	<MudSpacer />
	<div Class="background-color: blue"> <MudText Typo="Typo.h6">ELECTRIC UNICYCLES</MudText></div>
</MudStack>


<MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>

<MudText Typo="Typo.body1" Class="mb-4">Current count: @_currentCount</MudText>

<MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="IncrementCount">Click me</MudButton>





@code {
	private bool _expandedFilter = true;
	private void ShowFilters()
	{
		_expandedFilter = !_expandedFilter;
	}
	private int _currentCount = 0;

	private async Task IncrementCount()
	{
		_currentCount++;
		await ProtectedLocalStorage.SetAsync("testCounter", _currentCount);
	}

	protected override async Task OnInitializedAsync()
	{
		var result = await ProtectedLocalStorage.GetAsync<int>("testCounter");

		_currentCount = result.Success ? result.Value : 0;
		//   return base.OnInitializedAsync();
    }

}
