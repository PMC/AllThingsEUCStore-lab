@page "/ListProducts"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using StoreApi.Entities
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<MudPopoverProvider />
<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Small"/>
<MudSnackbarProvider />

<h1>Status @LatestJSON</h1>
<MudDataGrid T="@Product" Items="@ProductList" Hover="true" Groupable="true" Dense="true"
MultiSelection="false" Filterable="true"
FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
ReadOnly="@_readOnly" ColumnResizeMode="ResizeMode.Column"
CommittedItemChanges="@CommittedItemChanges"
FixedHeader="true"
ShowMenuIcon="true"
>
	<ToolBarContent>
		<MudText Typo="Typo.h6">Products</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
		AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>

	<Columns >

		<TemplateColumn Hidden="@(_readOnly)" Groupable="false" >
			<CellTemplate>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => OnEditProduct(context.Item)"/>
			</CellTemplate>

		</TemplateColumn>
		<PropertyColumn Property="x => x.ProductId" Title="Id" Groupable="false" Editable="false"/>
		<PropertyColumn Property="x => x.ProductName" Title="Name" Groupable="false"/>
		<PropertyColumn Property="x => x.Brand"/>
		<PropertyColumn Property="x => x.StockQuantity" Title="Quantity"/>
		<PropertyColumn Property="x => x.Price" Format="C" Groupable="false"/>
		<PropertyColumn Property="x => x.TireSize" Required="false" Groupable="true"/>
		<PropertyColumn Property="x => x.MaxSpeed" Required="false" Groupable="true"/>
		<PropertyColumn Property="x => x.MaxRange" Required="false" Groupable="true"/>
		<PropertyColumn Property="x => x.Weight" Required="false" Groupable="true"/>
		<PropertyColumn Property="x => x.BatteryCapacity" Required="false" Groupable="true"/>
		<PropertyColumn Property="x => x.HasSuspension" Required="true" Groupable="true">
			<EditTemplate>
				<MudCheckBox Label="HasSuspension?" @bind-Value="context.Item.HasSuspension" Size="Size.Large"/>
			</EditTemplate>
		</PropertyColumn>

		<PropertyColumn Hidden="true" Property="x => x.ImageUrl" Required="false" Groupable="false"/>
		<PropertyColumn Hidden="true" Property="x => x.Description" Groupable="false">
			<EditTemplate >
				<MudTextField Label="Description" @bind-Value="context.Item.Description" AutoGrow="true" Variant="Variant.Outlined"/>
			</EditTemplate>
		</PropertyColumn>

	</Columns>
	<PagerContent>
		<MudDataGridPager T="Product" />
	</PagerContent>
</MudDataGrid>

@code {

	private string _searchString = "";
	public string LatestJSON = "";
	private bool _readOnly = false;
	public List<Product> ProductList = new List<Product>();
	private string? _serviceEndpoint;
	protected override async Task OnInitializedAsync()
	{
		_serviceEndpoint = $"{HttpClient.BaseAddress}StoreApi/Product";
		await GetProducts();

	}

	private async Task GetProducts()
	{
		ProductList = await HttpClient.GetFromJsonAsync<List<Product>>(_serviceEndpoint);
	}

	// quick filter - filter globally across multiple columns with the same input
	private Func<Product, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Description is not null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Brand is not null && x.Brand.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};

	private async Task CommittedItemChanges(Product product)
	{
		//LatestJSON = $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(product)}";

		var request = new HttpRequestMessage
			{
				Method = HttpMethod.Put,
				RequestUri = new Uri($"https://localhost:7110/StoreApi/Product/{product.ProductId}"),
				Content = new StringContent($"{System.Text.Json.JsonSerializer.Serialize(product)}")
				{
					Headers =
				{
					ContentType = new MediaTypeHeaderValue("application/json")
				}
				}
			};
		using var response = await HttpClient.SendAsync(request);
		response.EnsureSuccessStatusCode();
		await response.Content.ReadAsStringAsync();
	}

	private async Task OnEditProduct(Product contextItem)
	{
		int index = ProductList.IndexOf(contextItem);
		var copiedProduct = new Product {         
				ProductName = contextItem.ProductName,
				ProductId = contextItem.ProductId,
				BatteryCapacity = contextItem.BatteryCapacity,
				Description = contextItem.Description,
				HasSuspension = contextItem.HasSuspension,
				MaxRange = contextItem.MaxRange,
				MaxSpeed = contextItem.MaxSpeed,
				TireSize = contextItem.TireSize,
				Weight = contextItem.Weight,
				StockQuantity = contextItem.StockQuantity,
				Brand = contextItem.Brand,
				ImageUrl = contextItem.ImageUrl,
				Price = contextItem.Price
			};

		var options = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.Medium};
		var parameters = new DialogParameters<ProductEditDialog> { { x => x.Product, contextItem } };

		var dialog = await DialogService.ShowAsync<ProductEditDialog>("Update Product", parameters);
		var result = await dialog.Result;

		if (result is null || result.Canceled)
		{
			Snackbar.Add("Canceled, Product not updated", Severity.Error);
			ProductList[index] = copiedProduct;
			StateHasChanged();
		}
		else
		{
			await CommittedItemChanges(contextItem);
			Snackbar.Add("Product Updated", Severity.Success);
			await GetProducts();
			StateHasChanged();
		}
		
	}

}