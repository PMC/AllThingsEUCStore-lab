@page "/ProductListAsCards"
@using StoreApi.Entities
@inject HttpClient HttpClient
@attribute [StreamRendering]
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
	<MudGrid Style="--icon-opacity: 0.1">
		@foreach (Product product in ProductList)
		{
			var stockText = product.StockQuantity > 0 ? "In Stock": "Out of Stock";
			var colorText = product.StockQuantity > 0 ? "Color: Green" : "Color: Red";

			<MudItem xs="12" md="12" lg="12">
				<MudCard Elevation="10">
					<MudGrid>
						<MudItem xs="12" sm="7" md="6" lg="4">
							<MudCardMedia Image="default.jpg" Height="540" Style="margin: 1rem 1rem 1rem 1rem"/>
						</MudItem>
						<MudItem xs="12" sm="5" md="6" lg="8">
							<MudCardContent>
								<MudText Typo="Typo.subtitle2">@product.Brand</MudText>
								<MudText Typo="Typo.h4">@product.ProductName</MudText>

								<MudText Typo="Typo.subtitle2" Style=@colorText>Availability: @stockText</MudText>

								<MudText Typo="Typo.subtitle2" Class="mt-1">Description </MudText>
								<MudText Typo="Typo.body2" Style="word-wrap: break-word;white-space: pre-line">
									@product.Description
								</MudText>
								<MudGrid >
									<MudItem>
										<MudIcon Icon="@Icons.Material.Filled.TireRepair" Style="font-size: 4rem;align-content: center">Tire Size</MudIcon>
										<MudText Align="Align.Center" Typo="Typo.body2">Tire Size</MudText>
										<MudText Align="Align.Center" Typo="Typo.h6">@product.TireSize"</MudText>
									</MudItem>
									<MudItem >
										<MudIcon Icon="@Icons.Material.Filled.Speed" Style="font-size: 4rem;">Speed</MudIcon>
										<MudText Align="Align.Center" Typo="Typo.body2">Max Speed</MudText>
										<MudText Align="Align.Center" Typo="Typo.h6">@product.MaxSpeed km/h</MudText>
									</MudItem>
									<MudItem>
										<MudIcon Icon="@Icons.Material.Filled.Map" Style="font-size: 4rem;">Range</MudIcon>
										<MudText Align="Align.Center" Typo="Typo.body2">Max Range</MudText>
										<MudText Align="Align.Center" Typo="Typo.h6">@product.MaxRange km</MudText>
									</MudItem>
									<MudItem>
										<MudIcon Icon="@Icons.Material.Filled.CleanHands" Style="font-size: 4rem;">Weight</MudIcon>
										<MudText Align="Align.Center" Typo="Typo.body2">Weight</MudText>
										<MudText Align="Align.Center" Typo="Typo.h6">@product.Weight kg</MudText>
									</MudItem>
									<MudItem>
										<MudIcon Icon="@Icons.Material.Filled.BatteryChargingFull" Style="font-size: 4rem;">Battery</MudIcon>
										<MudText Align="Align.Center" Typo="Typo.body2">Battery</MudText>
										<MudText Align="Align.Center" Typo="Typo.h6">@product.BatteryCapacity Wh</MudText>
									</MudItem>
									<MudItem>
										<MudIcon Icon="@Icons.Material.Filled.AlignHorizontalCenter" Style="font-size: 4rem;">Suspension</MudIcon>
										<MudText Align="Align.Center" Typo="Typo.body2">Suspension</MudText>
										<MudText Align="Align.Center" Typo="Typo.h6">@product.HasSuspension</MudText>
									</MudItem>
								</MudGrid>
								<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Learn More</MudButton>
							</MudCardContent>
						</MudItem>
					</MudGrid>
				</MudCard>
			</MudItem>
		}
	</MudGrid>
</MudContainer>
@code {
	private string _searchString = "";
	public IEnumerable<Product>? ProductList = new List<Product>();
	private string? _serviceEndpoint;
	protected override async Task OnInitializedAsync()
	{
		_serviceEndpoint = $"{HttpClient.BaseAddress}StoreApi/Product";
		await GetProducts();

	}

	private async Task GetProducts()
	{
		if (HttpClient != null) ProductList = await HttpClient.GetFromJsonAsync<List<Product>>(_serviceEndpoint);
	}

	// quick filter - filter globally across multiple columns with the same input
	private Func<Product, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Description is not null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Brand is not null && x.Brand.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};
}