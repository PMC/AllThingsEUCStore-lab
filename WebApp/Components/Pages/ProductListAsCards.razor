@page "/ProductListAsCards"
@using StoreApi.Entities
@inject HttpClient HttpClient
@attribute [StreamRendering]
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
	<MudGrid Style="--icon-opacity: 0.1">
		@foreach (Product product in ProductList)
		{


			<MudItem xs="12" sm="6" md="6">
				<MudCard>
					<MudCardContent>
						<MudIconButton Icon="@Icons.Material.Outlined.CatchingPokemon" Color="Color.Primary" Size="Size.Medium" Ripple="false" Class="rounded-circle mb-2" Style="background-color: rgba(var(--mud-palette-primary-rgb), var(--icon-opacity)) !important; cursor: default;" />
						<MudText Typo="Typo.h4" Class="mb-2">@product.ProductName</MudText>
						<MudText Typo="Typo.body1">@product.Description</MudText>
					</MudCardContent>
				</MudCard>
			</MudItem>
		}
	</MudGrid>
</MudContainer>
@code {
	private string _searchString = "";
	public IEnumerable<Product> ProductList = new List<Product>();
	private string? _serviceEndpoint;
	protected override async Task OnInitializedAsync()
	{
		_serviceEndpoint = $"{HttpClient.BaseAddress}StoreApi/Product";
		await GetProducts();

	}

	private async Task GetProducts()
	{
		ProductList = await HttpClient.GetFromJsonAsync<List<Product>>(_serviceEndpoint);
	}

	// quick filter - filter globally across multiple columns with the same input
	private Func<Product, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Description is not null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Brand is not null && x.Brand.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};
}