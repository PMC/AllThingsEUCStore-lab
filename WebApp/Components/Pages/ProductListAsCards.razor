@page "/ProductListAsCards"
@using StoreApi.Entities
@inject HttpClient HttpClient
@attribute [StreamRendering]
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudContainer Class="py-4 py-sm-8 py-md-12 py-lg-16 py-xl-20">
	<MudGrid Style="--icon-opacity: 0.1">
		@foreach (Product product in ProductList)
		{
			<MudItem xs="12" sm="12" md="12">
				<MudCard>
					<MudGrid>
						<MudItem xs="12" sm="12" md="4">
							<MudCardMedia Image="default.jpg" Height="540" />
						</MudItem>
						<MudItem xs="12"  sm="12" md="8">
							<MudCardContent>
								<MudText Typo="Typo.h6">@product.Brand</MudText>
								<MudText Typo="Typo.h4">@product.ProductName</MudText>
								<MudText Typo="Typo.h6">Availability: In Stock</MudText>
								<MudText Typo="Typo.body2">
									@product.Description
								</MudText>
								<MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
							</MudCardContent>
						</MudItem>
					</MudGrid>
				</MudCard>
			</MudItem>
		}
	</MudGrid>
</MudContainer>
@code {
	private string _searchString = "";
	public IEnumerable<Product> ProductList = new List<Product>();
	private string? _serviceEndpoint;
	protected override async Task OnInitializedAsync()
	{
		_serviceEndpoint = $"{HttpClient.BaseAddress}StoreApi/Product";
		await GetProducts();

	}

	private async Task GetProducts()
	{
		ProductList = await HttpClient.GetFromJsonAsync<List<Product>>(_serviceEndpoint);
	}

	// quick filter - filter globally across multiple columns with the same input
	private Func<Product, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Description is not null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (x.Brand is not null && x.Brand.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	};
}