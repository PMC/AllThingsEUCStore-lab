@using MudBlazor.Utilities

@implements IDisposable

@inject NavigationManager NavigationManager


<MudNavMenu Color="Color.Tertiary">
	<MudNavLink  Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
@*<MudNavLink  Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>

	<MudNavLink  Href="weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Weather</MudNavLink>
*@
	<MudNavLink  Href="ListProducts" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">List Products</MudNavLink>
	<MudNavLink  Href="test" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Test Page</MudNavLink>

	<MudNavLink Href="store/collections/electric-unicycles" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List" >Electric Unicycles</MudNavLink>
	<MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink>
	<AuthorizeView>
		<Authorized>
			<MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
			<form action="Account/Logout" method="post">
				<AntiforgeryToken/>
				<input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
				<button type="submit" class="mud-nav-link mud-ripple">
					<MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
				</button>
			</form>
		</Authorized>
		<NotAuthorized>
			<MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
			<MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
		</NotAuthorized>
	</AuthorizeView>
</MudNavMenu>


@code {
	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	//color: rgb(66, 104, 213) primary color
    protected override void OnInitialized()
    {
	
	    ReturnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
	    ReturnUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

