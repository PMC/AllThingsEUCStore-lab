@rendermode @(new InteractiveServerRenderMode(prerender: false))
@implements IDisposable

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudPaper Width="250px" Class="py-3" Elevation="0" Style="top: 15rem">
	<MudNavMenu>
		<MudText Typo="Typo.h6" Class="px-4">My Application</MudText>
		<MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Secondary Text</MudText>
		<MudDivider Class="my-2"/>
		<MudNavLink Href="/dashboard">Dashboard</MudNavLink>
		<MudNavLink Href="/servers">Servers</MudNavLink>
		<MudNavLink Href="/billing" Disabled="true">Billing</MudNavLink>
		<MudNavGroup Title="Settings" Expanded="true">
			<MudNavLink Href="/users">Users</MudNavLink>
			<MudNavLink Href="/security">Security</MudNavLink>
		</MudNavGroup>
		<MudNavLink Href="/about">About</MudNavLink>
	</MudNavMenu>
</MudPaper>

@code {
	private string? currentUrl;
	//bool _expanded = false;
	protected override void OnInitialized()
	{
		currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		NavigationManager.LocationChanged += OnLocationChanged;
	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
		StateHasChanged();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

	private void GoTo(string page)
	{
		
	}
}

